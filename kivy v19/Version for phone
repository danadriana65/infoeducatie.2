import kivy
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen, FadeTransition
from PIL import Image as PILImage, ImageDraw
from kivy.uix.image import Image
from kivy.uix.label import Label
from kivy.uix.videoplayer import VideoPlayer
from kivy.uix.video import Video
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
import webbrowser
from kivy.uix.popup import Popup
import os
import sys
import json
from kivy.clock import Clock
from kivy.uix.gridlayout import GridLayout
from kivy.uix.scrollview import ScrollView
from kivy.core.window import Window
from kivy.uix.textinput import TextInput
from kivy.uix.filechooser import FileChooserListView
from kivy.uix.floatlayout import FloatLayout
from kivy.resources import resource_find

def load_user_credentials():
    try:
        with open("user_credentials.json","r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
            return {}
def store_user_info(username, password, email):
    user_data = load_user_credentials()
    if username in user_data:
        return "User already exists"
    else:
        user_data[username] = {"username": username, "password": password, "email": email}  # ✅ Ensure 'username' is included
        with open("user_credentials.json", "w") as f:
            json.dump(user_data, f, indent=4)
        return "Account created successfully"

def verify_user(username, password):
    user_data = load_user_credentials()
    return username in user_data and user_data[username]["password"] == password

class WelcomeScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation="vertical")
        layout.add_widget(Label(text="Welcome to App!", font_size=24))

        start_button = Button(text="Start Video")
        start_button.bind(on_press=self.go_to_video)
        layout.add_widget(start_button)

        self.add_widget(layout)

    def go_to_video(self, instance):
        self.manager.current = "video_screen"

class VideoScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.layout = BoxLayout(orientation="vertical")

        # Default video path
        self.default_video_path = "C:/Users/Adriana/infoeducatie.2-3/WhatsApp Video 2025-03-31 at 12.10.50_af799974.mp4"

        if not os.path.exists(self.default_video_path):
            self.layout.add_widget(Label(text="Default video file not found! Please select a file."))

            file_chooser = FileChooserListView(filters=["*.mp4"])
            self.layout.add_widget(file_chooser)

            select_button = Button(text="Select File")
            select_button.bind(on_press=lambda x: self.play_video(file_chooser.selection))
            self.layout.add_widget(select_button)
        else:
            self.play_video(self.default_video_path)

        self.add_widget(self.layout)

    def play_video(self, video_path):
        if not video_path:
            return

        self.layout.clear_widgets()
        video_player = VideoPlayer(source=video_path, state="play")
        video_player.bind(state=self.on_video_end)
        self.layout.add_widget(video_player)

    def on_video_end(self, instance, value):
        if value == "stop":  # Detect video completion
            self.manager.current = "grid_screen"
class LoginScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.layout = FloatLayout()

        self.video_path = r"C:\Users\Adriana\infoeducatie.2-3\infoeducatie.2\WhatsApp Video 2025-04-05 at 20.39.03_78657a3f.mp4"
        if os.path.exists(self.video_path):
            self.video_player = VideoPlayer(source=self.video_path, play=True, options={"eos": "loop"})
            self.layout.add_widget(self.video_player)

        self.layout.add_widget(Label(text="Welcome to Cosmiccode!", font_size=24, pos_hint={"center_x": 0.5, "center_y": 0.85}))

        self.username = TextInput(hint_text="Username", size_hint=(0.5, 0.1), pos_hint={"center_x": 0.5, "center_y": 0.65})
        self.layout.add_widget(self.username)

        self.email = TextInput(hint_text="Your Email", size_hint=(0.5, 0.1), pos_hint={"center_x": 0.5, "center_y": 0.55})
        self.layout.add_widget(self.email)

        self.password = TextInput(hint_text="Password", password=True, size_hint=(0.5, 0.1), pos_hint={"center_x": 0.5, "center_y": 0.45})
        self.layout.add_widget(self.password)

        self.message_label = Label(text="", pos_hint={"center_x": 0.5, "center_y": 0.35})
        self.layout.add_widget(self.message_label)

        submit_button = Button(text="Create Account", size_hint=(0.3, 0.1), pos_hint={"center_x": 0.5, "center_y": 0.25}, on_press=self.submit_username)
        self.layout.add_widget(submit_button)

        login_button = Button(text="Login", size_hint=(0.3, 0.1), pos_hint={"center_x": 0.5, "center_y": 0.15}, on_press=self.login)
        self.layout.add_widget(login_button)

        self.add_widget(self.layout)

    def submit_username(self, instance):
        entered_username = self.username.text.strip()
        entered_password = self.password.text.strip()
        entered_email = self.email.text.strip()

        if not entered_username or not entered_password or not entered_email:
            self.message_label.text = "Error: Please fill all fields!"
        else:
            result = store_user_info(entered_username, entered_password, entered_email)
            self.message_label.text = result

    def login(self, instance):
        entered_username = self.username.text.strip()
        entered_password = self.password.text.strip()

        if verify_user(entered_username, entered_password):
            self.manager.get_screen("grid_screen").set_user_details(entered_username)  # Pass user data
            self.manager.current = "main"
        else:
            self.message_label.text = "Invalid credentials!"
class GridScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.layout = FloatLayout()

        # Background Video
        self.video_path = r"C:\Users\Adriana\infoeducatie.2-3\infoeducatie.2\WhatsApp Video 2025-04-05 at 20.39.03_78657a3f.mp4"
        if os.path.exists(self.video_path):
            self.video_player = VideoPlayer(source=self.video_path, play=True, options={"eos": "loop"})
            self.layout.add_widget(self.video_player)

        # Overlay UI Elements
        self.welcome_label = Label(text="Welcome, User!", font_size=24, pos_hint={"center_x": 0.5, "center_y": 0.85})
        self.layout.add_widget(self.welcome_label)

        sign_out_button = Button(text="Continue", size_hint=(0.3, 0.1), pos_hint={"center_x": 0.5, "center_y": 0.15}, on_press=self.sign_out)
        self.layout.add_widget(sign_out_button)

        self.add_widget(self.layout)

    def set_user_details(self, username):
        self.welcome_label.text = f"Welcome, {username}!"

    def sign_out(self, instance):
        self.manager.current = "login_screen"
class MainScreen(Screen):
    def __init__(self,**kwargs):
     super().__init__(**kwargs)
     layout = BoxLayout(orientation = "vertical")
     video_path = "C:\\Users\\Adriana\\Desktop\\grid\\WhatsApp Video 2025-04-05 at 20.39.03_78657a3f.mp4"
     if os.path.exists(video_path):
         video = Video(source=video_path,play=True, allow_stretch=True)
         layout.add_widget(video)
     options_layout=BoxLayout(orientation = "horizontal")
     languages = [("C++", "C:\\Users\\Adriana\\Desktop\\grid\\ISO_C++_Logo.svg(1).png"), 
                     ("Python", "C:\\Users\\Adriana\\Desktop\\grid\\Python.svg(1).png"),
                     ("JavaScript", "C:\\Users\\Adriana\\Desktop\\grid\\1698604163003(1).png")]
     for lang, sticker in languages:
         btn = Button(text=lang, size_hint=(None, None), width=250, height=50)
         img = Image(source=sticker, size_hint=(None, None), width=50, height=50)
         btn.bind(on_press=lambda instance, language=lang: self.switch_to_navigate(language))
         options_layout.add_widget(btn)
         options_layout.add_widget(img)
     undo_button = Button(text="Undo", size_hint=(0.3, 0.1), pos_hint={"center_x": 0.5, "center_y": 0.15}, on_press=self.undo)
     layout.add_widget(undo_button)
     setting_button = Button(text="Settings", size_hint=(0.2,0.1), pos_hint={"center_x": 0.5, "center_y": 0.15},on_press=self.settings)
     layout.add_widget(setting_button)
     layout.add_widget(options_layout)
     self.add_widget(layout)
    def switch_to_navigate(self, option):
       self.manager.add_widget(NavigateScreen(option, name=f"navigate_screen_{option}"))
       self.manager.current = f"navigate_screen_{option}"
    def settings(self,instance):
        self.manager.current="settings_screen"
    def undo(self, instance):
         self.manager.current="login_screen"
class UserDataManager:
    def __init__(self, file_path="user_data.json"):
        self.file_path = file_path

    def load_user_data(self):
        if os.path.exists(self.file_path):
            with open(self.file_path, "r") as f:
                return json.load(f)
        return {}

    def save_user_data(self, data):
        with open(self.file_path, "w") as f:
            json.dump(data, f, indent=4)
user_data_manager = UserDataManager()
class SettingsScreen(Screen):
    def __init__(self,**kwargs):
        super().__init__(**kwargs)
        self.layout = BoxLayout(orientation="vertical", padding=20, spacing=10)
        self.add_widget(self.layout)  # Asta trebuie să fie la finalul __init__()

        user_data = user_data_manager.load_user_data() 

        title_label = Label(text="Settings", font_size=24)
        self.layout.add_widget(title_label)
        username_label = Label(text=f"Username: {user_data.get('username', 'Unknown')}", font_size=18)
        self.layout.add_widget(username_label)
        email_label = Label(text=f"Email: {user_data.get('email', 'Unknown')}", font_size=18)
        self.layout.add_widget(email_label)
        self.profile_label = Label(text="No profile picture selected")  # ✅ Correct
        self.layout.add_widget(self.profile_label)
        if "profile_picture" in user_data and os.path.exists(user_data["profile_picture"]):
            try:
                profile_picture = PILImage.open(user_data["profile_picture"]).convert("RGBA")
                mask = PILImage.new("L",profile_picture.size, 0)
                draw = ImageDraw.Draw(mask)
                draw.ellipse((0,0,profile_picture.size[0] ,profile_picture[1]),fill=255)
                circular_profile= PILImage.new("RGBA", profile_picture.size)
                circular_profile.paste(profile_picture, (0, 0), mask)
                circular_profile=circular_profile.resize((100,100))
                circular_profile.save("circular_profile.png")

                self.profile_img = Image(source="circular_profile.png",size_hint=(None,None), width=100, height=100)
                self.layout.add_widget(self.profile_img)
            except Exception as e:
                self.profile_label.text = f"Error loading image: {e}"
        choose_profile_button = Button(text="Choose profile picture", size_hint=(None,None), width=200, height=50)
        choose_profile_button.bind(on_press=self.choose_profile_picture)
        self.layout.add_widget(choose_profile_button)
        remove_profile_button = Button(text= "Remove profile pcture", size_hint=(None,None), width=200, height=50)
        remove_profile_button.bind(on_press=self.remove_profile_picture)
        self.layout.add_widget(remove_profile_button)
    def choose_profile_picture(self,instance):
        file_popup = FileChooserListView(filters = ["*.png", "*.jpg", "*.jpeg"])
        self.layout.add_widget(file_popup)
    def remove_profile_picture(self,instance):
        self.profile_label.text = "No profile picture selected"
        if os.path.exists("circular_profile.png"):
            os.remove("circular_picture.png")
            self.add_widget(self.layout)
class NavigateScreen(Screen):
    def __init__(self,option,**kwargs):
        super().__init__(**kwargs)
        self.option = option
        layout = BoxLayout(orientation = "vertical")

        video_path = "C:/Users/Adriana/Desktop/grid/WhatsApp Video 2025-04-05 at 20.39.03_78657a3f.mp4"
        if os.path.exists(video_path):
            self.video_player = Video(source = video_path, state="play", options = {"eos":"loop"})
            layout.add_widget(self.video_player)

            top_buttons = BoxLayout(size_hint=(1, 0.1))
            progress_btn = Button(text = "Progress", size_hint=(None, None), width =150, height=50)
            leaderboard_btn = Button(text = "LeaderBoard", size_hint=(None, None), width=150, height=50)
            profile_btn = Button(text= "Profile", size_hint=(None, None), width=150, height=50)
            top_buttons.add_widget(progress_btn)
            top_buttons.add_widget(leaderboard_btn)
            top_buttons.add_widget(profile_btn)

            layout.add_widget(top_buttons)

            link_map= {
                "C++": "https://www.w3schools.com/cpp/cpp_syntax.asp",
                "Python": "https://www.w3schools.com/python/default.asp",
                "JavaScript": "https://www.w3schools.com/js/default.asp"
            }
            if self.option in link_map:
                theory_btn = Button(text=f"Teorie {self.option}", size_hint=(None, None), width=200, height=50)
                theory_btn.bind(on_press=lambda instance: webbrowser.open(link_map[self.option]))
                layout.add_widget(theory_btn)
            planet_images = {
            "Uranus": "C:/Users/Adriana/infoeducatie.2-2/Uranus(1).png",
            "Venus": "C:/Users/Adriana/infoeducatie.2-2/Venus.png",
            "Saturn": "C:/Users/Adriana/infoeducatie.2-2/Saturn.png"
            }
            planet_buttons = BoxLayout(size_hint=(1,0.3))
            for planet_name, image_path in planet_images.items():
                if os.path.exists(image_path):
                    img = Image(source = image_path, size_hint=(None, None), width=100, height=100)
                    btn = Button(text=planet_name, size_hint=(None, None), width=100, height=100)
                    btn.bind(on_press=lambda instance, name=planet_name: self.switch_to_navigate(name))
                    planet_buttons.add_widget(img)
                    planet_buttons.add_widget(btn)
            
            layout.add_widget(planet_buttons)

            undo_button = Button(text="Undo", size_hint=(None, None), width=200, height=50)
            undo_button.bind(on_press=lambda instance: setattr(self.manager, "current", "main_screen"))
            layout.add_widget(undo_button)

            self.add_widget(layout)
            
    def switch_to_navigate(self, planet_name):
      screen_name = f"options_screen_{planet_name}_{self.option}"
      if not self.manager.has_screen(screen_name):
        self.manager.add_widget(OptionsScreen(planet_name, self.option, name=screen_name))
        self.manager.current = screen_name

class OptionsScreen(Screen):
    def __init__(self, planet_name, selected_option, **kwargs):
        super().__init__(**kwargs)
        self.planet_name = planet_name
        self.selected_option = selected_option

        main_layout = BoxLayout(orientation='vertical', spacing=10, padding=10)

        title = Label(text=f"Options for {planet_name}", font_size=24, size_hint=(1, None), height=60)
        main_layout.add_widget(title)

        # Scrollable grid for exercise buttons
        scroll = ScrollView(size_hint=(1, 1))
        grid = GridLayout(cols=2, spacing=10, size_hint_y=None)
        grid.bind(minimum_height=grid.setter('height'))

        for i in range(7):
            btn_text = f"Exercițiu {i + 1}"
            btn = Button(text=btn_text, size_hint_y=None, height=80)

            # Assign button logic based on planet and option
            btn.bind(on_press=lambda instance, index=i: self.handle_exercise(index))
            grid.add_widget(btn)

        scroll.add_widget(grid)
        main_layout.add_widget(scroll)

        # Undo button
        undo = Button(text="Undo", size_hint=(None, None), size=(200, 50))
        undo.bind(on_press=lambda x: setattr(self.manager, "current", "navigate_screen_" + self.selected_option))
        main_layout.add_widget(undo)

        self.add_widget(main_layout)

    def handle_exercise(self, i):
      print(f"Exercițiu {i + 1} selectat pentru {self.planet_name} - {self.selected_option}")
    
      if self.planet_name == "Saturn" and self.selected_option == "C++":
        question = questions_cpp1[i]
        code = code_cpp1[i]
        answers = answers_cpp1[i]
        correct = answers[0]  
      if self.planet_name == "Saturn" and self.selected_option == "Python":
        question = questions_python_c[i]
        code = code_samples_python_c[i]
        answers = answers_python_c[i]
        correct = correct_answers_python_c[0]  
      if self.planet_name == "Saturn" and self.selected_option == "JavaScript":
        question = questions_javascript_error[i]
        code = code_samples_javascript_error[i]
        answers = answers_javascript_error[i]
        correct = correct_answers_javascript_error[0]
        question_data = {
            'question': question + "\n\n" + code,
            'answers': answers,
            'correct': correct,
            'planet': self.planet_name,
            'option': self.selected_option
        }

        # Create and switch to the question screen
        question_screen = QuestionScreen(question_data, name='question')
        self.manager.add_widget(question_screen)
        self.manager.current = 'question'

questions_cpp1 = [
    "Unde este eroarea?",
    "Unde este eroarea?",
    "Unde este eroarea?",
    "Unde este eroarea?",
    "Unde este eroarea?",
    "Unde este eroarea?",
    "Unde este eroarea? "
]

# Vectorul de cod Python asociat fiecărei întrebări
code_cpp1 = [
    "#include <iostream> \nusing namespace std; \nint main() { \nint *ptr; \n*ptr = 10; \ncout << *ptr << endl; \nreturn 0;}",
    "#include <iostream> \nusing namespace std; \nint main() { \nint matrice[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; \ncout << matrice[3][0] << endl; \n return 0;}",
    '#include <iostream> \nusing namespace std; \nint main() { \nstring mesaj = "Salut!"; \ncout << mesaj; \nreturn 0;}',
    "#include <iostream> \nusing namespace std; \nint main() { \nint v[5] = {1, 2, 3, 4, 5}; \ncout << v[5] << endl; \n return 0;}",
    '#include <iostream> \n#include <cstring> \n using namespace std; \nint main() { \nchar sir[6] = "Salut"; \nstrcat(sir, "!"); \ncout << sir << endl; \nreturn 0;}',
    "#include <iostream> \n #include <stack>\n using namespace std;\n int main() {\nstack<int> s; \n s.pop(); \n return 0;",
    "#include <iostream> \n #include <queue> \n using namespace std; \nint main() {\n queue<int> q; \nq.push(10);\n q.push(20);\n q.push(30);\n cout << q.back() << endl;\n q.pop();\n cout << q.front() << endl;\n q.pop();q.pop();\n cout << q.front() << endl;\nreturn 0;}"
]
answers_cpp1 = [
    ["Linia 5", "Linia 2", "Linia 3", "Nicio eroare"],
    ["Linia 4", "Linia 5", "Linia 3", "Nicio eroare"],
    ["Linia 1", "Linia 2", "Linia 3", "E bun, dar poate fi imbunatatit"],
    ["Linia 2", "Linia 5", "Linia 8", "Nicio eroare"],
    ["Linia 6", "Linia 2", "Linia 8", "Nicio eroare"],
    ["Linia 5", "Linia 2", "Linia 6", "Nicio eroare"],
    ["Linia 14", "Linia 2", "Linia 9", "Nicio eroare"]
]
questions_python_c = [
    "În ce linie apare eroarea de indentare?",
    "Unde este eroarea?",
    "Pe ce linie se află eroarea?",
    "Unde este eroarea de import?",
    "Pe ce linie este eroarea de index?",
    "Unde este eroarea de sintaxă?",
    "Pe ce linie este eroarea?"
]

code_samples_python_c = [
    "def my_function():\nprint('Hello!')\n  print('Indentation Error!')",
    'data = {"name": "Alice", "age": 25} \nprint(data["city"])',
    "stack = [] \n stack.append(3) \nstack.append(5) \nstack.pop(1) \nprint(stack)",
    "import non_existent_module\nprint('This should fail')",
    "my_list = [1, 2, 3]\nprint(my_list[5])",
    'class Animal: \ndef __init__(self, name): \nself.name = name \ndef speak(): \nprint("Sunet necunoscut!")\ndog = Animal("Rex") \ndog.speak()',
    'class Parent: \ndef __init__(self):\n print("Parent initialized") \nclass Child(Parent): \ndef __init__(self): \nprint("Child initialized") \nobj = Child()'
]

answers_python_c = [
    ["Linia 2", "Linia 3", "Linia 1", "Nicio eroare"],
    ["Linia 1", "Linia 2", "Tot", "Nicio eroare"],
    ["Linia 1", "Linia 4", "Linia 3", "Nicio eroare"],
    ["Linia 1", "Linia 2", "Linia 3", "Nicio eroare"],
    ["Linia 2", "Linia 3", "Linia 1", "Nicio eroare"],
    ["Linia 1", "Linia 2", "Linia 4", "Nicio eroare"],
    ["Linia 4", "Linia 5", "Linia 3", "Nicio eroare"]
]

correct_answers_python_c = [
    "Linia 2",
    "Linia 2",
    "Linia 4",
    "Linia 1",
    "Linia 2",
    "Linia 4",
    "Linia 5"
]
questions_javascript_error = [
    "Unde este eroarea de sintaxă?",
    "În ce linie apare eroarea de tip?",
    "Unde se află eroarea de referință?",
    "Pe ce linie se află eroarea de index?",
    "Unde apare eroarea de funcție nedefinită?",
    "Pe ce linie este eroarea de acces la obiect?",
    "În ce linie este eroarea de scoping?"
]

code_samples_javascript_error = [
    "console.log('Hello World'\nconsole.log('JS Error')",   # Lipsă paranteză închidere
    "let x = 'text' + 5;\nconsole.log(x);",                # Concatenare greșită
    "console.log(y);\nlet y = 10;",                         # Variabilă folosită înainte de declarare
    "let array = [1, 2, 3];\nconsole.log(array[5]);",       # Acces invalid la index
    "myFunction();\nfunction notDeclared() { \nconsole.log('Error') }",  # Apelare înainte de definire
    "let obj = { name: 'Alice' };\nconsole.log(obj.age.length);",      # Acces invalid la proprietăți
    "function test() {\n    let x = 10;\n}\nconsole.log(x);"  # Variabilă în afara scoping-ului funcției
]

answers_javascript_error = [
    ["Linia 2", "Linia 1", "Linia 3", "Nicio eroare"],
    ["Linia 1", "Linia 2", "Linia 3", "Nicio eroare"],
    ["Linia 3", "Linia 2", "Linia 1", "Nicio eroare"],
    ["Linia 2", "Linia 3", "Linia 1", "Nicio eroare"],
    ["Linia 1", "Linia 2", "Linia 3", "Nicio eroare"],
    ["Linia 1", "Linia 2", "Linia 3", "Nicio eroare"],
    ["Linia 1", "Linia 2", "Linia 3", "Nicio eroare"]
]

correct_answers_javascript_error = [
    "Linia 1",
    "Linia 1",
    "Linia 1",
    "Linia 2",
    "Linia 1",
    "Linia 2",
    "Linia 3"
]

class Video2Screen(Screen):
    def __init__(self, video_path, next_screen, question_data, **kwargs):
        super().__init__(**kwargs)
        self.question_data = question_data
        self.next_screen = next_screen

        layout = BoxLayout(orientation='vertical')
        self.video = Video(source=video_path, state='play', options={'eos': 'stop'})
        self.video.bind(on_eos=self.on_video_end)

        layout.add_widget(self.video)
        self.add_widget(layout)

    def on_video_end(self, *args):
       if not self.manager.has_screen('question'):
        self.manager.add_widget(QuestionScreen(self.question_data, name='question'))

        self.manager.current = 'question'
        self.manager.remove_widget(self)  # Elimină doar Video2Screen

# Screen to display the question and handle answers
class QuestionScreen(Screen):
    def __init__(self, question_data, **kwargs):
        super().__init__(**kwargs)
        self.question_data = question_data
        self.buttons = []
        # În handle_answer, în loc să creezi din nou:
        layout = BoxLayout(orientation='vertical', padding=10, spacing=10)

        q_label = Label(text=question_data['question'], font_size=22, size_hint_y=0.2)
        layout.add_widget(q_label)

        for answer in question_data['answers']:
            btn = Button(text=answer, size_hint_y=None, height=60)
            btn.bind(on_press=lambda instance, a=answer, b=btn: self.handle_answer(a, b))
            layout.add_widget(btn)
            self.buttons.append(btn)

        back_btn = Button(text="Undo", size_hint_y=None, height=50)
        back_btn.bind(on_press=lambda x: setattr(self.manager, "current", "options"))
        layout.add_widget(back_btn)

        self.add_widget(layout)

    def handle_answer(self, selected, button):
        for b in self.buttons:
            b.disabled = True

        correct = self.question_data['correct']
        planet = self.question_data['planet']
        option = self.question_data['option']

        if selected == correct:
            button.background_color = (0, 1, 0, 1)
            user_progress.setdefault(option, {}).setdefault(planet, 0)
            user_progress[option][planet] += 1
            video_path = r"C:\Users\Adriana\infoeducatie.2-1\WhatsApp Video 2025-05-17 at 22.04.13_3d19574a.mp4"
        else:
            button.background_color = (1, 0, 0, 1)
            video_path = r"C:\Users\Adriana\infoeducatie.2-1\WhatsApp Video 2025-05-17 at 22.12.34_8b843c0c.mp4"

        save_progress()

        # Transition to video screen
        video2_screen = Video2Screen(video_path, 'question', self.question_data, name='video')
        self.manager.add_widget(video2_screen)
        self.manager.current = 'video'


def save_progress():
    print("Progres salvat:", user_progress)

class MyApp(App):
    def build(self):
        sm = ScreenManager(transition=FadeTransition())
        sm.add_widget(WelcomeScreen(name="welcome_screen"))
        sm.add_widget(VideoScreen(name="video_screen"))
        sm.add_widget(GridScreen(name="grid_screen"))
        sm.add_widget(LoginScreen(name="login_screen"))
        sm.add_widget(MainScreen(name="main"))
        sm.add_widget(SettingsScreen(name="settings_screen"))
        sm.add_widget(NavigateScreen("Python", name="navigate_screen"))
        sm.add_widget(NavigateScreen("C++", name="navigate_screen"))
        sm.add_widget(NavigateScreen("JavaScript", name="navigate_screen"))
        sm.current = "welcome_screen"
        return sm

MyApp().run()
